using Logic.Factories;
using Logic.Interfaces;
using Logic.Models;

namespace CMD.Menu;

public class MenuService(IUserService userService)
{
    private readonly IUserService _userService = userService;

    public void Header()
    {
        Console.ForegroundColor = ConsoleColor.Red;
        string title = @"
     ____  __.__.__  .__    .__  .__          __   
    |    |/ _|__|  | |  |   |  | |__| _______/  |_          
    |      < |  |  | |  |   |  | |  |/  ___/\   __\  
    |    |  \|  |  |_|  |__ |  |_|  |\___ \  |  |  
    |____|__ \__|____/____/ |____/__/____  > |__|  
            \/                           \/ ";

        Console.WriteLine(title);
        Console.ForegroundColor = ConsoleColor.White;
    }

    public string MainMenu()
    {
        while (true)
        {
            Console.Clear();
            Header();
            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("------------------Bounty Menu------------------");
            Console.WriteLine("");
            Console.WriteLine($"{"1.",-3} View target(s) - Displays a list of all targets.");
            Console.WriteLine($"{"2.",-3} Add target(s) - Allows you to add a new target.");
            Console.WriteLine($"{"3.",-3} Edit target(s) - Allows you to edit an existing target.");
            Console.WriteLine($"{"4.",-3} Kill confirmation(s) - Removes target from the list.");
            Console.WriteLine($"{"5.",-3} Wipe Hard Drive(s) - Exits the application.");
            Console.WriteLine("");
            Console.WriteLine("------------------Bounty Menu------------------");
            Console.WriteLine("");
            Console.ForegroundColor = ConsoleColor.White;
            Console.Write("Choose your menu option: ");
            var option = Console.ReadLine()!;

            switch (option.ToLower())
            {
                case "1":
                    ViewAllUsers();
                    break;
                case "2":
                    AddNewUser();
                    break;
                case "3":
                    EditUser();
                    break;
                case "4":
                    RemoveUser();
                    break;
                case "5":
                    ExitApplication();
                    break;
                default:
                    InvalidOption();
                    break;
            }
        }
    }

    public void ExitApplication()
    {
        Console.WriteLine("Exiting application...");
        Environment.Exit(0);
    }

    public void InvalidOption()
    {
        Console.WriteLine("You must enter a valid option");
    }

    public void AddNewUser()
    {
        var user = UserFactory.Create();

        Console.Clear();
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("------------------Add New Target Menu------------------");
        Console.WriteLine("");
        Console.ForegroundColor = ConsoleColor.White;

        Console.Write("Enter your First name: ");
        user.FirstName = Console.ReadLine()!;

        Console.Write("Enter your Last name: ");
        user.LastName = Console.ReadLine()!;

        Console.Write("Enter your E-mail Address: ");
        user.EmailAddress = Console.ReadLine()!;

        Console.Write("Enter your Phone Number: ");
        user.MobilePhone = Console.ReadLine()!;

        Console.Write("Enter your Street Address: ");
        user.StreetAddress = Console.ReadLine()!;

        Console.Write("Enter your Postal Code: ");
        user.PostalCode = Console.ReadLine()!;

        Console.Write("Enter your Municipality: ");
        user.Municipality = Console.ReadLine()!;

        var result = _userService.CreateUser(user);
        Console.Clear();

        if (result)
            Console.WriteLine($"User was created successfully, You entered \n \n Autogenerated ID: {user.Id} \n Full Name: {user.FullName} \n E-mail Address: {user.EmailAddress} \n Phone number: {user.MobilePhone} \n Street address: {user.StreetAddress} \n Postal code: {user.PostalCode} \n Municipality: {user.Municipality} ");
        else
            Console.WriteLine("Unable to create user.");

        Console.WriteLine("\n Press any key to return to the menu");
        Console.ReadKey();
        
    }

    public void EditUser()
    {
        Console.Clear();
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("------------------Edit Target Menu------------------");
        Console.WriteLine("");
        Console.ForegroundColor = ConsoleColor.White;
        Console.Write("Enter the ID of the user you want to edit: ");
        
        var inputId = Console.ReadLine();

        if (string.IsNullOrEmpty(inputId))
        {
            Console.WriteLine("Invalid User ID format. Press any key to return to the menu.");
            Console.ReadKey();
            return;
        }

        var allUsers = _userService.GetAllUsers().ToList();

        var userToEdit = allUsers.FirstOrDefault(u => u.Id == inputId);
        if (userToEdit == null)
        {
            Console.WriteLine("User not found. Press any key to return to the menu.");
            Console.ReadKey();
            return;
        }

        Console.Clear();
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("------------------Edit Target Menu------------------");
        Console.WriteLine("");
        Console.ForegroundColor = ConsoleColor.White;

        Console.Write($"Enter new First name (current: {userToEdit.FirstName}): ");
        var firstName = Console.ReadLine();
        if (!string.IsNullOrEmpty(firstName)) userToEdit.FirstName = firstName;

        Console.Write($"Enter new Last name (current: {userToEdit.LastName}): ");
        var lastName = Console.ReadLine();
        if (!string.IsNullOrEmpty(lastName)) userToEdit.LastName = lastName;

        Console.Write($"Enter new E-mail Address (current: {userToEdit.EmailAddress}): ");
        var emailAddress = Console.ReadLine();
        if (!string.IsNullOrEmpty(emailAddress)) userToEdit.EmailAddress = emailAddress;

        Console.Write($"Enter new Phone Number (current: {userToEdit.MobilePhone}): ");
        var mobilePhone = Console.ReadLine();
        if (!string.IsNullOrEmpty(mobilePhone)) userToEdit.MobilePhone = mobilePhone;

        Console.Write($"Enter new Street Address (current: {userToEdit.StreetAddress}): ");
        var streetAddress = Console.ReadLine();
        if (!string.IsNullOrEmpty(streetAddress)) userToEdit.StreetAddress = streetAddress;

        Console.Write($"Enter new Postal Code (current: {userToEdit.PostalCode}): ");
        var postalCode = Console.ReadLine();
        if (!string.IsNullOrEmpty(postalCode)) userToEdit.PostalCode = postalCode;

        Console.Write($"Enter new Municipality (current: {userToEdit.Municipality}): ");
        var municipality = Console.ReadLine();
        if (!string.IsNullOrEmpty(municipality)) userToEdit.Municipality = municipality;

        bool success = _userService.UpdateUser(userToEdit);

        if (success)
        {
            Console.WriteLine("User updated successfully!");
        }
        else
        {
            Console.WriteLine("Failed to update user. Please try again.");
        }

        Console.WriteLine("\nPress any key to return to the menu");
        Console.ReadKey();
    }


    public void RemoveUser()
    {
        Console.Clear();
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("------------------Remove Target Menu------------------");
        Console.WriteLine("");
        Console.ForegroundColor = ConsoleColor.White;
        Console.Write("Enter the ID of the user you want to remove: ");

        var inputId = Console.ReadLine();

        if (string.IsNullOrEmpty(inputId))
        {
            Console.WriteLine("Invalid User ID format. Press any key to return to the menu.");
            Console.ReadKey();
            return;
        }

        var success = _userService.RemoveUser(inputId);

        if (success)
        {
            Console.WriteLine("User removed successfully!");
        }
        else
        {
            Console.WriteLine("Failed to remove user. Please try again.");
        }

        Console.WriteLine("\nPress any key to return to the menu");
        Console.ReadKey();
    }

    public void ViewAllUsers()
    {
        Console.Clear();
        Console.ForegroundColor = ConsoleColor.Green;
        Console.WriteLine("------------------View All Targets Menu------------------");
        Console.WriteLine("");
        Console.ForegroundColor = ConsoleColor.White;

        foreach (var user in _userService.GetAllUsers())
        {
            Console.WriteLine($"{"id: ",-3}{user.Id}");
            Console.WriteLine($"{"First Name: ",-3}{user.FirstName}");
            Console.WriteLine($"{"Last Name: ",-3}{user.LastName}");
            Console.WriteLine($"{"E-mail Address: ",-3}{user.EmailAddress}");
            Console.WriteLine($"{"Phone Number: ",-3}{user.MobilePhone}");
            Console.WriteLine($"{"Street Address:",-3}{user.StreetAddress}");
            Console.WriteLine($"{"Postal Code: ",-3}{user.PostalCode}");
            Console.WriteLine($"{"Municipality: ",-3}{user.Municipality}");
            Console.WriteLine("");
        }

        Console.WriteLine("Press any key to return to the menu");
        Console.ReadKey();
    }
}



